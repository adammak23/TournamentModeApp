<Page x:Name="page" x:Class="WindowsApp2.Views.MainPage"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:Behaviors="using:Template10.Behaviors"
      xmlns:Core="using:Microsoft.Xaml.Interactions.Core"
      xmlns:Interactivity="using:Microsoft.Xaml.Interactivity"
      xmlns:controls="using:Template10.Controls"
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
      xmlns:local="using:WindowsApp2.Views"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
      xmlns:vm="using:WindowsApp2.ViewModels"
      xmlns:vml="using:WindowsApp2.ViewModels"
      mc:Ignorable="d">

    <Page.DataContext>
        <vm:MainPageViewModel x:Name="ViewModel" />
    </Page.DataContext>
    <Page.Resources>
        <vml:MainPageViewModel x:Key="ViewModel2" x:Name="ViewModel2" />
    </Page.Resources>

    <RelativePanel Background="{ThemeResource ApplicationPageBackgroundThemeBrush}">
        <VisualStateManager.VisualStateGroups>
            <VisualStateGroup x:Name="AdaptiveVisualStateGroup">
                <VisualState x:Name="VisualStateNarrow">
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="{StaticResource NarrowMinWidth}" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <!--  TODO: change properties for narrow view  -->
                        <Setter Target="stateTextBox.Text" Value="Narrow Visual State" />
                    </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="VisualStateNormal">
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="{StaticResource NormalMinWidth}" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <!--  TODO: change properties for normal view  -->
                        <Setter Target="stateTextBox.Text" Value="Normal Visual State" />
                    </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="VisualStateWide">
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="{StaticResource WideMinWidth}" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <!--  TODO: change properties for wide view  -->
                        <Setter Target="stateTextBox.Text" Value="Wide Visual State" />
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>

        <controls:PageHeader x:Name="pageHeader"
                             RelativePanel.AlignLeftWithPanel="True"
                             RelativePanel.AlignRightWithPanel="True"
                             RelativePanel.AlignTopWithPanel="True"
                             Text="Login Panel">

            <!--  secondary commands  -->
            <controls:PageHeader.SecondaryCommands>
                <AppBarButton Click="{x:Bind ViewModel.GotoSettings}" Label="Settings" />
                <AppBarButton Click="{x:Bind ViewModel.GotoPrivacy}" Label="Privacy" />
                <AppBarButton Click="{x:Bind ViewModel.GotoAbout}" Label="About" />
            </controls:PageHeader.SecondaryCommands>

        </controls:PageHeader>

        <RelativePanel EntranceNavigationTransitionInfo.IsTargetElement="True"
                       RelativePanel.AlignBottomWithPanel="True"
                       RelativePanel.AlignLeftWithPanel="True"
                       RelativePanel.AlignRightWithPanel="True"
                       RelativePanel.Below="pageHeader">

            <TextBlock x:Name="stateTextBox"
                       Margin="359,128,-343,-112"
                       Text="Current Visual State" />
            <TextBlock x:Name="Error1" Tag="" Margin="194,34,-390,-119" FontSize="20" />
        </RelativePanel>
        <Grid Margin="10,53,-221,-188" x:Name="grid">
            <TextBox MinWidth="150"
                         x:Name="Login"
                         PlaceholderText="Login"
                         MinHeight="30"
                         Text="{Binding Login, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                         Margin="10,10,72,0" Height="32" VerticalAlignment="Top">
                <!--Text in TextBox only for for DetailsPage binding-->
                <Interactivity:Interaction.Behaviors>
                    <!--  enable submit on enter key  -->
                    <Behaviors:KeyBehavior Key="Enter">
                        <Core:InvokeCommandAction 
                            Command="{Binding TryLogin, Source={StaticResource ViewModel2}}"
                            CommandParameter="{Binding ElementName=page}" />
                    </Behaviors:KeyBehavior>
                    <!--  focus on textbox when page loads  -->
                    <Core:EventTriggerBehavior>
                        <Behaviors:FocusAction />
                    </Core:EventTriggerBehavior>
                    <!-- popup for loggining maybe
                    <Core:EventTriggerBehavior EventName="Tapped" SourceObject="{Binding TryLogin}">
                        <Behaviors:MessageDialogAction Title="Show profile" Content="This is an example of a Command-type hamburger button. It does not navigate, only raises the Tapped event for some custom implementation." />
                    </Core:EventTriggerBehavior>-->
                </Interactivity:Interaction.Behaviors>
            </TextBox>
            <PasswordBox MinWidth="150"
                     x:Name="Password"
                     PlaceholderText="Password"
                     MinHeight="30"
                     Password="{Binding Password, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Margin="10,47,72,0" Height="32" VerticalAlignment="Top">
                <Interactivity:Interaction.Behaviors>
                    <!--  enable submit on enter key  -->
                    <Behaviors:KeyBehavior Key="Enter">
                        <Core:InvokeCommandAction 
                            Command="{Binding TryLogin, Source={StaticResource ViewModel2}}"
                            CommandParameter="{Binding ElementName=page}" />
                    </Behaviors:KeyBehavior>
                </Interactivity:Interaction.Behaviors>
            </PasswordBox>
            <ProgressBar x:Name="progressbar" IsIndeterminate="False" Margin="10,80,72,45" Foreground="#FF008BFF" Background="Transparent" Height="9"/>
            <Button x:Name="submitButton2"
                    Command="{Binding TryLogin, Source={StaticResource ViewModel2}}" 
                    CommandParameter="{Binding ElementName=page}"
                    Content="Login" Margin="10,93,0,10"
                    Visibility="Visible" Width="150"
                    >
                <Interactivity:Interaction.Behaviors>
                    <Core:DataTriggerBehavior Binding="{Binding Text.Length, ElementName=Login, UpdateSourceTrigger=PropertyChanged}" ComparisonCondition="Equal" Value="0">
                        <Core:ChangePropertyAction TargetObject="{Binding ElementName=submitButton2}" PropertyName="IsEnabled" Value="False" />
                    </Core:DataTriggerBehavior>
                    <Core:DataTriggerBehavior Binding="{Binding Text.Length, ElementName=Login, UpdateSourceTrigger=PropertyChanged}" ComparisonCondition="GreaterThan" Value="0">
                        <Core:ChangePropertyAction TargetObject="{Binding ElementName=submitButton2}" PropertyName="IsEnabled" Value="True" />
                    </Core:DataTriggerBehavior>
                    <Core:DataTriggerBehavior Binding="{Binding Password.Length, ElementName=Password, UpdateSourceTrigger=PropertyChanged}" ComparisonCondition="Equal" Value="0">
                        <Core:ChangePropertyAction TargetObject="{Binding ElementName=submitButton2}" PropertyName="IsEnabled" Value="False" />
                    </Core:DataTriggerBehavior>
                    <Core:DataTriggerBehavior Binding="{Binding Password.Length, ElementName=Password, UpdateSourceTrigger=PropertyChanged}" ComparisonCondition="GreaterThan" Value="0">
                        <Core:ChangePropertyAction TargetObject="{Binding ElementName=submitButton2}" PropertyName="IsEnabled" Value="True" />
                    </Core:DataTriggerBehavior>
                    <Core:DataTriggerBehavior Binding="{Binding Tag, ElementName=Error1, UpdateSourceTrigger=PropertyChanged}" ComparisonCondition="Equal" Value="LoggedIn">
                        <Core:CallMethodAction MethodName="GotoDetailsPage" TargetObject="{Binding}" />
                    </Core:DataTriggerBehavior>
                </Interactivity:Interaction.Behaviors>
            </Button>
            <!--log out-->
            <Button x:Name="LogoutButton"
                    Command="{Binding TryLogout, Source={StaticResource ViewModel2}}" 
                    CommandParameter="{Binding ElementName=page}"
                    Content="Log  out" Margin="10,27,0,76" Width="150"
                    Visibility="Collapsed"/>
            <!--~register-->
            <Button x:Name="RegisterButton"
                    Command="{Binding TryRegister, Source={StaticResource ViewModel2}}" 
                    CommandParameter="{Binding ElementName=page}"
                    Content="Register" Margin="9,131,0,-28"
                    Visibility="Visible" Width="150">
                <Interactivity:Interaction.Behaviors>
                    <Core:DataTriggerBehavior Binding="{Binding Text.Length, ElementName=Login, UpdateSourceTrigger=PropertyChanged}" ComparisonCondition="Equal" Value="0">
                        <Core:ChangePropertyAction TargetObject="{Binding ElementName=RegisterButton}" PropertyName="IsEnabled" Value="False" />
                    </Core:DataTriggerBehavior>
                    <Core:DataTriggerBehavior Binding="{Binding Text.Length, ElementName=Login, UpdateSourceTrigger=PropertyChanged}" ComparisonCondition="GreaterThan" Value="0">
                        <Core:ChangePropertyAction TargetObject="{Binding ElementName=RegisterButton}" PropertyName="IsEnabled" Value="True" />
                    </Core:DataTriggerBehavior>
                    <Core:DataTriggerBehavior Binding="{Binding Password.Length, ElementName=Password, UpdateSourceTrigger=PropertyChanged}" ComparisonCondition="Equal" Value="0">
                        <Core:ChangePropertyAction TargetObject="{Binding ElementName=RegisterButton}" PropertyName="IsEnabled" Value="False" />
                    </Core:DataTriggerBehavior>
                    <Core:DataTriggerBehavior Binding="{Binding Password.Length, ElementName=Password, UpdateSourceTrigger=PropertyChanged}" ComparisonCondition="GreaterThan" Value="0">
                        <Core:ChangePropertyAction TargetObject="{Binding ElementName=RegisterButton}" PropertyName="IsEnabled" Value="True" />
                    </Core:DataTriggerBehavior>

                </Interactivity:Interaction.Behaviors>
            </Button>

        </Grid>
    </RelativePanel>
</Page>

